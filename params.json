{"name":"Mycila Guice","tagline":"Mycila Guice Extensions","body":"**Table of Contents**\r\n\r\n- [Mycila Guice Extensions](#mycila-guice-extensions)\r\n\t- [Build Status](#build-status)\r\n\t- [Maven Repository](#maven-repository)\r\n\t- [Extensions](#extensions)\r\n\t\t- [1. Customizes injection annotations](#1-customizes-injection-annotations)\r\n\t\t- [2. Closeable Injector](#2-closeable-injector)\r\n\t\t- [3. JSR-250](#3-jsr-250)\r\n\t\t- [4. Legacy and Factory Binder](#4-legacy-and-factory-binder)\r\n\t\t- [5. Service and Module discovery](#5-service-and-module-discovery)\r\n\t\t- [6. Web Extensions](#6-web-extensions)\r\n\t\t- [7. Groovy Extensions](#7-groovy-extensions)\r\n\t\t- [8. Servlet Extension](#8-servlet-extension)\r\n\r\n# Mycila Guice Extensions #\r\n\r\nThis project contains a set of Google Guice Extensions useful in every-days development with [Google Guice](https://code.google.com/p/google-guice/).\r\n\r\n__Issues:__ https://github.com/mycila/guice/issues\r\n\r\n<img width=\"100px\" src=\"http://www.sonatype.com/system/images/W1siZiIsIjIwMTMvMDQvMTIvMTEvNDAvMzcvMTgzL05leHVzX0ZlYXR1cmVfTWF0cml4X29zZ2lfbG9nby5wbmciXV0/Nexus-Feature-Matrix-osgi-logo.png\" title=\"OSGI Compliant\"></img>\r\n[![Build Status](https://travis-ci.org/mycila/guice.png?branch=master)](https://travis-ci.org/mycila/guice)\r\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/1875760f595bd5c7cb70197871c0d854 \"githalytics.com\")](http://githalytics.com/mycila/guice)\r\n\r\n## Maven Repository ##\r\n\r\n - __Releases__ \r\n\r\nAvailable in Maven Central Repository: http://repo1.maven.org/maven2/com/mycila/guice/extensions/\r\n\r\n - __Snapshots__\r\n \r\nAvailable in OSS Repository:  https://oss.sonatype.org/content/repositories/snapshots/com/mycila/guice/extensions/\r\n\r\n## Extensions ##\r\n\r\n### 1. Customizes injection annotations ###\r\n\r\nThis extensions enables you to define custom injection annotations and use them. This extensions is used by the [JSR-250 extension](#3-jsr-250).  \r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-injection</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n__Usage__\r\n\r\nIn example, suppose you have your own annotation called `@Autowire` to inject dependencies. You could automatically support `@Resource`, `@Inject` and `@Autowire` at the same time. Supposing you'd like to use this annotation to inject your dependencies:\r\n\r\n    @Target({METHOD, CONSTRUCTOR, FIELD})\r\n    @Retention(RUNTIME)\r\n    public @interface Autowire {\r\n        String value() default \"\";\r\n    }\r\n\r\nYou have to define a `KeyProvider` which help creating the Guice key used to recover a dependency from the annotation information plus the injected member.\r\n\r\n    public class AutowireKeyProvider extends KeyProviderSkeleton<Autowire> {\r\n        @Override\r\n        public Key<?> getKey(TypeLiteral<?> injectedType, Field injectedMember, Autowire resourceAnnotation) {\r\n            String name = resourceAnnotation.value();\r\n            return name.length() == 0 ?\r\n                    super.getKey(injectedType, injectedMember, resourceAnnotation) :\r\n                    Key.get(injectedType.getFieldType(injectedMember), Names.named(name));\r\n        }\r\n    }\r\n\r\nOnce the key provider is defined, just add this code in your Guice module:\r\n\r\n    MBinder.wrap(binder()).bindAnnotationInjector(Autowire.class, AutowireKeyProvider.class);\r\n\r\n\r\n\r\n### 2. Closeable Injector ###\r\n\r\nThis extension allows your classes to listen when an Injector is closed, to be able to clean some resources for example.\r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-closeable</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n__Note__\r\n\r\nThis extension is automatically loaded if you are using the [Service and Module discovery extension](#5-service-and-module-discovery).\r\n\r\n__Usage__\r\n\r\nBind in your module the classes you want to be aware of Injector closing. Those classes must implement the `InjectorCloseListener` interface. \r\n\r\n    public interface InjectorCloseListener {\r\n        void onInjectorClosing();\r\n    }\r\n\r\nCreate your Injector has usual and add the ` CloseableModule`.\r\n\r\n    Injector injector = Guice.createInjector(Stage.PRODUCTION, new CloseableModule(), new MyModule());\r\n\r\nOr like this:\r\n\r\n    CloseableInjector injector = Guice.createInjector(Stage.PRODUCTION, new CloseableModule(), new MyModule()).getInstance(CloseableInjector.class);\r\n\r\nThe `CloseableInjector` is juste the plain standard Injector enhanced with a `close()` method. You can use it instead of the default `Injector`.\r\n\r\nWhen your application ends, just close the Injector like this if you are using the `CloseableInjector`: \r\n\r\n    injector.close()\r\n\r\nOr if you are using Guice's `Injector` class:\r\n\r\n    injector.getInstance(CloseableInjector.class).close();\r\n\r\n### 3. JSR-250 ###\r\n\r\nThis extension adds JSR-250 (object life-cycle) support to Guice.\r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-closeable</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n__Notes__\r\n\r\nThis extension depends on the [Closeable Injector extension](#2-closeable-injector) and both can be automatically automatically loaded if you are using the [Service and Module discovery extension](#5-service-and-module-discovery).\r\n\r\n`@PreDestroy` only works for singletons.\r\n\r\n__Usage__\r\n\r\nCreate your `Injector` with those two modules also: `Jsr250Module` and `CloseableModule`.\r\n\r\n    Injector injector = Guice.createInjector(Stage.PRODUCTION, new CloseableModule(), new Jsr250Module(), new MyModule());\r\n\r\nif you are using the [Service and Module discovery extension](#5-service-and-module-discovery), you just need to create the Injector like this as usual.\r\n\r\n    Injector injector = Guice.createInjector(Stage.PRODUCTION, new MyModule());\r\n\r\nAnd that's all you need to have you `@PostConstruct`, `@PreDestroy` and `@Resource` annotations working!\r\n\r\nDo not forget when you have finished working with the `Injector` to close it so that `@PreDestroy` methods get called. \r\n\r\n    injector.getInstance(CloseableInjector.class).close();\r\n\r\n__Example of JSR-250 class__\r\n\r\n    @Singleton\r\n    public class Bank {\r\n    \r\n        List<Account> accounts = new ArrayList<Account>();\r\n    \r\n        @Resource\r\n        Provider<Account> provider;\r\n    \r\n        @PostConstruct\r\n        void openBank() {\r\n            // create two accounts initially\r\n            accounts.add(provider.get());\r\n            accounts.add(provider.get());\r\n        }\r\n    \r\n        @PreDestroy\r\n        void close() {\r\n            accounts.clear();\r\n        }\r\n    }\r\n\r\n### 4. Legacy and Factory Binder ###\r\n\r\nThis extension allows the binding easily of legacy code or objects build through a factory method. \r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-legacy</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n__Usage__\r\n\r\nSuppose that you have the following classes having an old-way designed with factory classes:\r\n\r\n    public interface Repository {\r\n        // [...]\r\n    }\r\n\r\nAnd its factory:\r\n\r\n    public class ServiceFactory {\r\n        \r\n        public void setOption(String option) {\r\n            // [...]\r\n        }\r\n\r\n        public Repository newRepository(Connection con) { \r\n            // [...] (code using option to return a Repository) \r\n        }\r\n\r\n    }\r\n\r\nBy using the `LegacyProvider` of this extension you can bind the `Repository` like this in your Guice module:\r\n\r\n    bind(Repository.class).toProvider(LegacyProvider.of(Repository.class)\r\n        .withFactory(ServiceFactory.class, \"create\", Connection.class)\r\n        .inject(\"setOption\", String.class)\r\n    );\r\n\r\nThis enables Guice to load and inject the `ServiceFactory` and get all the parameters also from the Guice bindings.\r\n\r\n### 5. Service and Module discovery ###\r\n\r\nThis extension allows the discovery of Guice module automatically in the classpath by using the JDK Service Loader feature. You can also bind custom interfaces and automatically discover and inject into the implementations defined on the classpath.\r\n\r\nSince automatic discovery does not allow you to control bindings, this extension comes with an `@OverrideModule` annotation to be able to flag modules which overrides existing bindings.\r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-service</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n__Usage__\r\n\r\n___Loading Guice module from the classpath___\r\n\r\nPut a file in your classpath called `com.google.inject.Module` in the `META-INF/services` folder containing the complete class names of your modules. In example:\r\n\r\n    # In `META-INF/services/com.google.inject.Module`\r\n    com.mycila.guice.ext.service.MyModule\r\n    com.mycila.guice.ext.service.MyOverrideModule\r\n\r\nThen load your `Injector` with the `ServiceModule`:\r\n\r\n    Injector injector = Guice.createInjector(new ServiceModule());\r\n\r\nThis will also add the two other module in your `Injector`.\r\n\r\n___Loading custom implementations from the classpath___\r\n\r\n\r\nYou can also bind an interface to one or several implementations discovered on the classpath by using the providers `SingleServiceProvider` or `MultiServiceProvider`.  \r\n\r\n    bind(MyService.class).toProvider(new SingleServiceProvider<>(Service.class));\r\n\r\nOr to bind all discovered implementations to an array: \r\n\r\n    bind(MyService[].class).toProvider(new MultiServiceProvider<>(Service.class));\r\n\r\nJust put on your classpath the file `META-INF/services/my.package.MyService` and the list of implementations in it.\r\n\r\n### 6. Web Extensions ###\r\n\r\nThis extension facilitate the setup of a Guice environment within a web application.\r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-web</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n__Usage__\r\n\r\nJust declare the `MycilaGuiceListener` as a listener in your `web.xml` file. The listener automatically creates a Guice injector by using the [Service and Module discovery extension](#5-service-and-module-discovery).\r\n\r\n    <listener>\r\n        <listener-class>com.mycila.guice.ext.web.MycilaGuiceListener</listener-class>\r\n    </listener>\r\n\r\n### 7. Groovy Extensions ###\r\n\r\nThis extension scans for classes having methods annotated by `@Expand` and add those methods to target Groovy classes.\r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-groovy</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n__Note__\r\n\r\nThis extension is automatically discovered when using the [Service and Module discovery extension](#5-service-and-module-discovery).\r\n\r\n__Usage__\r\n\r\nJust add the module `ExpandModule` in your Injector. Supposing you have a repository class and a Book class:\r\n\r\n    class Book {\r\n        // [...]\r\n    }\r\n    \r\n    class BookRepository {\r\n    \r\n        @Expand(Book)\r\n        Book findById(String id) { [...] }\r\n        \r\n        @Expand(Book)\r\n        Book save(Book b) { [...] }\r\n    \r\n    } \r\n\r\nThan you can now in your code execute:\r\n\r\n    Book b = Book.findById('123')\r\n    // [...]\r\n    b.save()\r\n\r\n### 8. Servlet Extension ###\r\n\r\nSame code as the official Google Guice Servlet Extension, but do not depend on internal Guice stuff but on external Guava dependency instead.  \r\n\r\n__Maven dependency__\r\n\r\n    <dependency>\r\n        <groupId>com.mycila.guice.extensions</groupId>\r\n        <artifactId>mycila-guice-servlet</artifactId>\r\n        <version>X.Y.ga</version>\r\n    </dependency>\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}